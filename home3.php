<?php
$Link13 = 'page.php'; //для перехода на титульную страницу



?>

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
    <body>
        <h4>
            1. JSON (англ. JavaScript Object Notation) — текстовый формат обмена данными, основанный на JavaScript.
            Но при этом формат независим от JS и может использоваться в любом языке программирования.
            JSON — используется в REST-запросах.
            Json-объект — это неупорядоченное множество пар «ключ:значение», заключённое в фигурные скобки «{ }».
            Ключ описывается строкой, между ним и значением стоит символ «:».
            Пары ключ-значение отделяются друг от друга запятыми.
            Значения ключа могут быть любыми:число,строка,массив,другой объект.
            Как уже понятно, JSON используется для обмена данными, которые являются структурированными и хранятся в файле
            или в строке кода. Числа, строки или любые другие объекты отображаются в виде текста, поэтому пользователь
            обеспечивает простое и надежное хранение информации. JSON обладает рядом преимуществ, которые и сделали его популярным:
            Не занимает много места, является компактным в написании и быстро компилируется.
            Создание текстового содержимого понятно человеку, просто в реализации, а чтение со стороны среды
            разработки не вызывает никаких проблем. Чтение может осуществляться и человеком, поскольку ничего сложного в
            представлении данных нет.
            Структура преобразуется для чтения на любых языках программирования.
            Практически все языки имеют соответствующие библиотеки или другие инструменты для чтения данных JSON.
        </h4>

        <br>
        <br>

        <h4>
            2. В PHP есть несколько функций для сортировки массивов, на этой странице даётся их общее описание.

            Основные различия между функциями:

            В одних функциях массивы (array) сортируются по ключам элементов, в других по значениям: $array['ключ'] = 'значение';
            В каких-то функциях связь между ключами и значениями после сортировки сохраняется, в каких-то нет.
            Это может приводить к тому, что ключи будут сбрасываться в числовые значения (0, 1, 2, ...).
            Различия в порядке сортировки: алфавитный, возрастающий, убывающий, числовой, естественный, случайный или определённый пользователем
            Примечание: Все функции сортировки модифицируют переданный массив, а не возвращают отсортированную копию
            Если какая-либо из этих функций сортировки оценивает два элемента как равные, они сохраняют свой исходный порядок.
            <br>
            <br>
            !!!До PHP 8.0.0 их порядок не был определён (сортировка была нестабильной).!!!
        </h4>

        <br>
        <br>

        <h4>
            3. array_merge — Сливает один или большее количество массивов
            <br>
            array_merge(array ...$arrays): array
            <br>
            <br>
            Сливает элементы одного или большего количества массивов таким образом, что значения одного массива присоединяются
            к концу предыдущего. Результатом работы функции является новый массив.
            Если входные массивы имеют одинаковые строковые ключи, тогда каждое последующее значение будет заменять предыдущее.
            Однако, если массивы имеют одинаковые числовые ключи, значение, упомянутое последним, не заменит исходное значение,
            а будет добавлено в конец массива.
            В результирующем массиве значения исходного массива с числовыми ключами будут перенумерованы в возрастающем порядке, начиная с нуля.

        </h4>
        <a href="<?= $Link13 ?>">Ссылка для перехода на страницу с упражнениями</a>
</body>
</html>
